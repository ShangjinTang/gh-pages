"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2144],{83542:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});var s=a(85893),t=a(11151);const d={tags:["Machine Learning","Data Science","Pandas"],description:"A quick start for beginners"},i="10 Minutes to Pandas",r={id:"machine-learning/numpy-pandas-matplotlib/ten-minutes-to-pandas",title:"10 Minutes to Pandas",description:"A quick start for beginners",source:"@site/docs/machine-learning/numpy-pandas-matplotlib/ten-minutes-to-pandas.md",sourceDirName:"machine-learning/numpy-pandas-matplotlib",slug:"/machine-learning/numpy-pandas-matplotlib/ten-minutes-to-pandas",permalink:"/site/docs/machine-learning/numpy-pandas-matplotlib/ten-minutes-to-pandas",draft:!1,unlisted:!1,tags:[{label:"Machine Learning",permalink:"/site/docs/tags/machine-learning"},{label:"Data Science",permalink:"/site/docs/tags/data-science"},{label:"Pandas",permalink:"/site/docs/tags/pandas"}],version:"current",frontMatter:{tags:["Machine Learning","Data Science","Pandas"],description:"A quick start for beginners"},sidebar:"machinelearningSidebar",previous:{title:"CS231n Numpy Tutorial",permalink:"/site/docs/machine-learning/numpy-pandas-matplotlib/cs231n-numpy-tutorial"}},l={},o=[{value:"Basic data structures in pandas",id:"basic-data-structures",level:2},{value:"Object creation",id:"object-creation",level:2},{value:"Viewing data",id:"viewing_data",level:2},{value:"Selection",id:"selection",level:2},{value:"Getitem (<code>[]</code>)",id:"getitem",level:3},{value:"Selection by label",id:"selection-by-label",level:3},{value:"Selection by position",id:"selection-by-position",level:3},{value:"Boolean indexing",id:"boolean-indexing",level:3},{value:"Setting",id:"setting",level:3},{value:"Missing data",id:"missing-data",level:2},{value:"Operations",id:"operations",level:2},{value:"Stats",id:"stats",level:3},{value:"User defined functions",id:"user-defined-functions",level:3},{value:"Value Counts",id:"value-counts",level:3},{value:"String Methods",id:"string-methods",level:3},{value:"Merge",id:"merge",level:2},{value:"Concat",id:"concat",level:3},{value:"Join",id:"join",level:3},{value:"Grouping",id:"grouping",level:2},{value:"Reshaping",id:"reshaping",level:2},{value:"Stack",id:"stack",level:3},{value:"Pivot tables",id:"pivot-tables",level:3},{value:"Time series",id:"time-series",level:2},{value:"Categoricals",id:"categoricals",level:2},{value:"Plotting",id:"plotting",level:2},{value:"Importing and exporting data",id:"data-import-export",level:2},{value:"CSV",id:"csv",level:3},{value:"Parquet",id:"parquet",level:3},{value:"Excel",id:"excel",level:3},{value:"Gotchas",id:"gotchas",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"10-minutes-to-pandas",children:"10 Minutes to Pandas"}),"\n",(0,s.jsxs)(e.admonition,{type:"info",children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://pandas.pydata.org/",children:"Pandas"})," is a Python software library for data analysis. It provides a large number of functions and methods for processing data quickly and conveniently."]}),(0,s.jsxs)(e.p,{children:["This article is a copy of the official document ",(0,s.jsx)(e.a,{href:"https://pandas.pydata.org/docs/user_guide/10min.html",children:"10 minutes to pandas"}),", and the corresponding ",(0,s.jsx)(e.code,{children:"pandas"})," version is 2.1.3."]})]}),"\n",(0,s.jsx)(e.p,{children:"Customarily, we import as follows:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [1]: import numpy as np\n\nIn [2]: import pandas as pd\n"})}),"\n",(0,s.jsx)(e.h2,{id:"basic-data-structures",children:"Basic data structures in pandas"}),"\n",(0,s.jsx)(e.p,{children:"Pandas provides two types of classes for handling data:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"Series"}),": a one-dimensional labeled array holding data of any type"]}),"\n"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"such as integers, strings, Python objects etc."}),"\n"]}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"DataFrame"}),": a two-dimensional data structure that holds data like a two-dimension array or a table with rows and columns."]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"object-creation",children:"Object creation"}),"\n",(0,s.jsxs)(e.p,{children:["Creating a ",(0,s.jsx)(e.code,{children:"Series"})," by passing a list of values, letting pandas create a default ",(0,s.jsx)(e.code,{children:"RangeIndex"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]:\n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Creating a ",(0,s.jsx)(e.code,{children:"DataFrame"})," by passing a NumPy array with a datetime index using ",(0,s.jsx)(e.code,{children:"date_range"})," and labeled columns:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [5]: dates = pd.date_range(\"20130101\", periods=6)\n\nIn [6]: dates\nOut[6]:\nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(\"ABCD\"))\n\nIn [8]: df\nOut[8]:\n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Creating a ",(0,s.jsx)(e.code,{children:"DataFrame"})," by passing a dictionary of objects where the keys are the column labels and the values are the column values."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [9]: df2 = pd.DataFrame(\n   ...:     {\n   ...:         "A": 1.0,\n   ...:         "B": pd.Timestamp("20130102"),\n   ...:         "C": pd.Series(1, index=list(range(4)), dtype="float32"),\n   ...:         "D": np.array([3] * 4, dtype="int32"),\n   ...:         "E": pd.Categorical(["test", "train", "test", "train"]),\n   ...:         "F": "foo",\n   ...:     }\n   ...: )\n   ...:\n\nIn [10]: df2\nOut[10]:\n     A          B    C  D      E    F\n0  1.0 2013-01-02  1.0  3   test  foo\n1  1.0 2013-01-02  1.0  3  train  foo\n2  1.0 2013-01-02  1.0  3   test  foo\n3  1.0 2013-01-02  1.0  3  train  foo\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The columns of the resulting ",(0,s.jsx)(e.code,{children:"DataFrame"})," have different ",(0,s.jsx)(e.code,{children:"dtypes"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [11]: df2.dtypes\nOut[11]:\nA          float64\nB    datetime64[s]\nC          float32\nD            int32\nE         category\nF           object\ndtype: object\n"})}),"\n",(0,s.jsx)(e.p,{children:"If you're using IPython, tab completion for column names (as well as public attributes) is automatically enabled. Here's a subset of the attributes that will be completed:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [12]: df2.<TAB>  # noqa: E225, E999\ndf2.A                  df2.bool\ndf2.abs                df2.boxplot\ndf2.add                df2.C\ndf2.add_prefix         df2.clip\ndf2.add_suffix         df2.columns\ndf2.align              df2.copy\ndf2.all                df2.count\ndf2.any                df2.combine\ndf2.append             df2.D\ndf2.apply              df2.describe\ndf2.applymap           df2.diff\ndf2.B                  df2.duplicated\n"})}),"\n",(0,s.jsxs)(e.p,{children:["As you can see, the columns ",(0,s.jsx)(e.code,{children:"A"}),", ",(0,s.jsx)(e.code,{children:"B"}),", ",(0,s.jsx)(e.code,{children:"C"}),", and ",(0,s.jsx)(e.code,{children:"D"})," are automatically tab completed. ",(0,s.jsx)(e.code,{children:"E"})," and ",(0,s.jsx)(e.code,{children:"F"})," are there as well; the rest of the attributes have been truncated for brevity."]}),"\n",(0,s.jsx)(e.h2,{id:"viewing_data",children:"Viewing data"}),"\n",(0,s.jsxs)(e.p,{children:["Use ",(0,s.jsx)(e.code,{children:"DataFrame.head"})," and ",(0,s.jsx)(e.code,{children:"DataFrame.tail"})," to view the top and bottom rows of the frame respectively:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [13]: df.head()\nOut[13]:\n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]:\n                   A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Return a NumPy representation of the underlying data with ",(0,s.jsx)(e.code,{children:"DataFrame.to_numpy"})," without the index or column labels:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [15]: df.index\nOut[15]:\nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object')\n"})}),"\n",(0,s.jsxs)(e.p,{children:["\u4ee5 ",(0,s.jsx)(e.code,{children:"DataFrame.to_numpy"})," \u8fd4\u56de\u5e95\u5c42\u6570\u636e\u7684\u6570\u5b57\u8868\u793a\uff0c\u800c\u4e0d\u5e26\u7d22\u5f15\u6216\u5217\u6807\u7b7e\uff1a"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [17]: df.to_numpy()\nOut[17]: \narray([[ 0.4691, -0.2829, -1.5091, -1.1356],\n       [ 1.2121, -0.1732,  0.1192, -1.0442],\n       [-0.8618, -2.1046, -0.4949,  1.0718],\n       [ 0.7216, -0.7068, -1.0396,  0.2719],\n       [-0.425 ,  0.567 ,  0.2762, -1.0874],\n       [-0.6737,  0.1136, -1.4784,  0.525 ]])\n"})}),"\n",(0,s.jsxs)(e.admonition,{type:"info",children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"NumPy arrays have one dtype for the entire array while pandas DataFrames have one dtype per column"}),". When you call ",(0,s.jsx)(e.code,{children:"DataFrame.to_numpy"}),", pandas will find the NumPy dtype that can hold ",(0,s.jsx)(e.em,{children:"all"})," of the dtypes in the DataFrame. If the common data type is ",(0,s.jsx)(e.code,{children:"object"}),", ",(0,s.jsx)(e.code,{children:"DataFrame.to_numpy"})," will require copying data."]}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [18]: df2.dtypes\nOut[18]:\nA          float64\nB    datetime64[s]\nC          float32\nD            int32\nE         category\nF           object\ndtype: object\n\nIn [19]: df2.to_numpy()\nOut[19]:\narray([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']],\n      dtype=object)\n"})})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.describe"})," shows a quick statistic summary of your data:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [20]: df.describe()\nOut[20]:\n              A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804\n"})}),"\n",(0,s.jsx)(e.p,{children:"Transposing your data:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [21]: df.T\nOut[21]:\n   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.sort_index"})," sorts by an axis:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [22]: df.sort_index(axis=1, ascending=False)\nOut[22]:\n                   D         C         B         A\n2013-01-01 -1.135632 -1.509059 -0.282863  0.469112\n2013-01-02 -1.044236  0.119209 -0.173215  1.212112\n2013-01-03  1.071804 -0.494929 -2.104569 -0.861849\n2013-01-04  0.271860 -1.039575 -0.706771  0.721555\n2013-01-05 -1.087401  0.276232  0.567020 -0.424972\n2013-01-06  0.524988 -1.478427  0.113648 -0.673690\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.sort_values"})," sorts by values:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [23]: df.sort_values(by="B")\nOut[23]:\n                   A         B         C         D\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n'})}),"\n",(0,s.jsx)(e.h2,{id:"selection",children:"Selection"}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["While standard Python / NumPy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, ",(0,s.jsx)(e.code,{children:"DataFrame.at"}),", ",(0,s.jsx)(e.code,{children:"DataFrame.iat"}),", ",(0,s.jsx)(e.code,{children:"DataFrame.loc"})," and ",(0,s.jsx)(e.code,{children:"DataFrame.iloc"}),"."]})}),"\n",(0,s.jsxs)(e.h3,{id:"getitem",children:["Getitem (",(0,s.jsx)(e.code,{children:"[]"}),")"]}),"\n",(0,s.jsxs)(e.p,{children:["For a ",(0,s.jsx)(e.code,{children:"DataFrame"}),", passing a single label selects a columns and yields a ",(0,s.jsx)(e.code,{children:"Series"})," equivalent to ",(0,s.jsx)(e.code,{children:"df.A"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [24]: df["A"]\nOut[24]:\n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64\n'})}),"\n",(0,s.jsxs)(e.p,{children:["For a ",(0,s.jsx)(e.code,{children:"DataFrame"}),", passing a slice ",(0,s.jsx)(e.code,{children:":"})," selects matching rows:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [25]: df[0:3]\nOut[25]:\n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [26]: df["20130102":"20130104"]\nOut[26]:\n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n'})}),"\n",(0,s.jsx)(e.h3,{id:"selection-by-label",children:"Selection by label"}),"\n",(0,s.jsx)(e.p,{children:"Selecting a row matching a label:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [27]: df.loc[dates[0]]\nOut[27]:\nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Selecting all rows (",(0,s.jsx)(e.code,{children:":"}),") with a select column labels:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [28]: df.loc[:, ["A", "B"]]\nOut[28]:\n                   A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648\n'})}),"\n",(0,s.jsxs)(e.p,{children:["For label slicing, both endpoints are ",(0,s.jsx)(e.em,{children:"included"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [29]: df.loc["20130102":"20130104", ["A", "B"]]\nOut[29]:\n                   A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n'})}),"\n",(0,s.jsx)(e.p,{children:"Selecting a single row and column label returns a scalar:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [30]: df.loc[dates[0], "A"]\nOut[30]: 0.4691122999071863\n'})}),"\n",(0,s.jsx)(e.p,{children:"For getting fast access to a scalar (equivalent to the prior method):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [31]: df.at[dates[0], "A"]\nOut[31]: 0.4691122999071863\n'})}),"\n",(0,s.jsx)(e.h3,{id:"selection-by-position",children:"Selection by position"}),"\n",(0,s.jsx)(e.p,{children:"Select via the position of the passed integers:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [32]: df.iloc[3]\nOut[32]:\nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64\n"})}),"\n",(0,s.jsx)(e.p,{children:"Integer slices acts similar to NumPy/Python:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [33]: df.iloc[3:5, 0:2]\nOut[33]:\n                   A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n"})}),"\n",(0,s.jsx)(e.p,{children:"Lists of integer position locations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [34]: df.iloc[[1, 2, 4], [0, 2]]\nOut[34]:\n                   A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232\n"})}),"\n",(0,s.jsx)(e.p,{children:"For slicing rows explicitly:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [35]: df.iloc[1:3, :]\nOut[35]:\n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n"})}),"\n",(0,s.jsx)(e.p,{children:"For slicing columns explicitly:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [36]: df.iloc[:, 1:3]\nOut[36]:\n                   B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427\n"})}),"\n",(0,s.jsx)(e.p,{children:"For getting a value explicitly:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [37]: df.iloc[1, 1]\nOut[37]: -0.17321464905330858\n"})}),"\n",(0,s.jsx)(e.p,{children:"For getting fast access to a scalar (equivalent to the prior method):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [38]: df.iat[1, 1]\nOut[38]: -0.17321464905330858\n"})}),"\n",(0,s.jsx)(e.h3,{id:"boolean-indexing",children:"Boolean indexing"}),"\n",(0,s.jsxs)(e.p,{children:["Select rows where ",(0,s.jsx)(e.code,{children:"df.A"})," is greater than ",(0,s.jsx)(e.code,{children:"0"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [39]: df[df["A"] > 0]\nOut[39]:\n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Selecting values from a ",(0,s.jsx)(e.code,{children:"DataFrame"})," where a boolean condition is met:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [40]: df[df > 0]\nOut[40]:\n                   A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Using ",(0,s.jsx)(e.code,{children:"Series.isin"})," method for filtering:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [41]: df2 = df.copy()\n\nIn [42]: df2["E"] = ["one", "one", "two", "three", "four", "three"]\n\nIn [43]: df2\nOut[43]:\n                   A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2["E"].isin(["two", "four"])]\nOut[44]:\n                   A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four\n'})}),"\n",(0,s.jsx)(e.h3,{id:"setting",children:"Setting"}),"\n",(0,s.jsx)(e.p,{children:"Setting a new column automatically aligns the data by the indexes:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range("20130102", periods=6))\n\nIn [46]: s1\nOut[46]:\n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df["F"] = s1\n'})}),"\n",(0,s.jsx)(e.p,{children:"Setting values by label:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [48]: df.at[dates[0], "A"] = 0\n'})}),"\n",(0,s.jsx)(e.p,{children:"Setting values by position:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [49]: df.iat[0, 1] = 0\n"})}),"\n",(0,s.jsx)(e.p,{children:"Setting by assigning with a NumPy array:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [50]: df.loc[:, "D"] = np.array([5] * len(df))\n'})}),"\n",(0,s.jsx)(e.p,{children:"The result of the prior setting operations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [51]: df\nOut[51]:\n                   A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5.0  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5.0  5.0\n"})}),"\n",(0,s.jsxs)(e.p,{children:["A ",(0,s.jsx)(e.code,{children:"where"})," operation with setting:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2\n\nIn [54]: df2\nOut[54]:\n                   A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5.0  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5.0 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5.0 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5.0 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5.0 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5.0 -5.0\n"})}),"\n",(0,s.jsx)(e.h2,{id:"missing-data",children:"Missing data"}),"\n",(0,s.jsxs)(e.p,{children:["For NumPy data types, ",(0,s.jsx)(e.code,{children:"np.nan"})," represents missing data. It is by default not included in computations."]}),"\n",(0,s.jsx)(e.p,{children:"Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ["E"])\n\nIn [56]: df1.loc[dates[0] : dates[1], "E"] = 1\n\nIn [57]: df1\nOut[57]:\n                   A         B         C    D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0  NaN\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.dropna"})," drops any rows that have missing data:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [58]: df1.dropna(how="any")\nOut[58]: \n                   A         B         C    D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.fillna"})," fills missing data:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [59]: df1.fillna(value=5)\nOut[59]: \n                   A         B         C    D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5.0  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0  5.0\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"isna"})," gets the boolean mask where values are ",(0,s.jsx)(e.code,{children:"nan"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [60]: pd.isna(df1)\nOut[60]: \n                A      B      C      D      F      E\n2013-01-01  False  False  False  False   True  False\n2013-01-02  False  False  False  False  False  False\n2013-01-03  False  False  False  False  False   True\n2013-01-04  False  False  False  False  False   True\n"})}),"\n",(0,s.jsx)(e.h2,{id:"operations",children:"Operations"}),"\n",(0,s.jsx)(e.h3,{id:"stats",children:"Stats"}),"\n",(0,s.jsxs)(e.p,{children:["Operations in general ",(0,s.jsx)(e.em,{children:"exclude"})," missing data."]}),"\n",(0,s.jsx)(e.p,{children:"Calculate the mean value for each column:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64\n"})}),"\n",(0,s.jsx)(e.p,{children:"Calculate the mean value for each row:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [62]: df.mean(axis=1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Operating with another ",(0,s.jsx)(e.code,{children:"Series"})," or ",(0,s.jsx)(e.code,{children:"DataFrame"})," with a different index or column will align the result with the union of the index or column labels. In addition, pandas automatically broadcasts along the specified dimension and will fill unaligned labels with ",(0,s.jsx)(e.code,{children:"np.nan"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis="index")\nOut[65]: \n                   A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN\n'})}),"\n",(0,s.jsx)(e.h3,{id:"user-defined-functions",children:"User defined functions"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.agg"})," and ",(0,s.jsx)(e.code,{children:"DataFrame.transform"})," applies a user defined function that reduces or broadcasts its result respectively."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [66]: df.agg(lambda x: np.mean(x) * 5.6)\nOut[66]: \nA    -0.025054\nB    -2.150294\nC    -3.851445\nD    28.000000\nF    16.800000\ndtype: float64\n\nIn [67]: df.transform(lambda x: x * 101.2)\nOut[67]: \n                     A           B           C      D      F\n2013-01-01    0.000000    0.000000 -152.716721  506.0    NaN\n2013-01-02  122.665737  -17.529322   12.063922  506.0  101.2\n2013-01-03  -87.219115 -212.982405  -50.086843  506.0  202.4\n2013-01-04   73.021382  -71.525239 -105.204988  506.0  303.6\n2013-01-05  -43.007200   57.382459   27.954680  506.0  404.8\n2013-01-06  -68.177398   11.501219 -149.616767  506.0  506.0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"value-counts",children:"Value Counts"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()\nOut[70]: \n4    5\n2    2\n6    2\n1    1\nName: count, dtype: int64\n"})}),"\n",(0,s.jsx)(e.h3,{id:"string-methods",children:"String Methods"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Series"})," is equipped with a set of string processing methods in the ",(0,s.jsx)(e.code,{children:"str"})," attribute that make it easy to operate on each element of the array, as in the code snippet below."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [71]: s = pd.Series(["A", "B", "C", "Aaba", "Baca", np.nan, "CABA", "dog", "cat"])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object\n'})}),"\n",(0,s.jsx)(e.h2,{id:"merge",children:"Merge"}),"\n",(0,s.jsx)(e.h3,{id:"concat",children:"Concat"}),"\n",(0,s.jsxs)(e.p,{children:["pandas provides various facilities for easily combining together ",(0,s.jsx)(e.code,{children:"Series"})," and ",(0,s.jsx)(e.code,{children:"DataFrame"})," objects with various kinds of set logic for the indexes and relational algebra functionality in the case of join / merge-type operations."]}),"\n",(0,s.jsxs)(e.p,{children:["Concatenating pandas objects together row-wise with ",(0,s.jsx)(e.code,{children:"concat"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n"})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["Adding a column to a ",(0,s.jsx)(e.code,{children:"DataFrame"})," is relatively fast. However, adding a row requires a copy, and may be expensive. We recommend passing a pre-built list of records to the ",(0,s.jsx)(e.code,{children:"DataFrame"})," constructor instead of building a ",(0,s.jsx)(e.code,{children:"DataFrame"})," by iteratively appending records to it."]})}),"\n",(0,s.jsx)(e.h3,{id:"join",children:"Join"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"merge"})," enables SQL style join types along specific columns."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [77]: left = pd.DataFrame({"key": ["foo", "foo"], "lval": [1, 2]})\n\nIn [78]: right = pd.DataFrame({"key": ["foo", "foo"], "rval": [4, 5]})\n\nIn [79]: left\nOut[79]:\n   key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]:\n   key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on="key")\nOut[81]:\n   key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"merge"})," on unique keys:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [82]: left = pd.DataFrame({"key": ["foo", "bar"], "lval": [1, 2]})\n\nIn [83]: right = pd.DataFrame({"key": ["foo", "bar"], "rval": [4, 5]})\n\nIn [84]: left\nOut[84]:\n   key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]:\n   key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on="key")\nOut[86]:\n   key  lval  rval\n0  foo     1     4\n1  bar     2     5\n'})}),"\n",(0,s.jsx)(e.h2,{id:"grouping",children:"Grouping"}),"\n",(0,s.jsx)(e.p,{children:'By "group by" we are referring to a process involving one or more of the following steps:'}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Splitting"})," the data into groups based on some criteria"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Applying"})," a function to each group independently"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Combining"})," the results into a data structure"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [87]: df = pd.DataFrame(\n   ....:     {\n   ....:         "A": ["foo", "bar", "foo", "bar", "foo", "bar", "foo", "foo"],\n   ....:         "B": ["one", "one", "two", "three", "two", "two", "one", "three"],\n   ....:         "C": np.random.randn(8),\n   ....:         "D": np.random.randn(8),\n   ....:     }\n   ....: )\n   ....:\n\nIn [88]: df\nOut[88]:\n     A      B         C         D\n0  foo    one  1.346061 -1.577585\n1  bar    one  1.511763  0.396823\n2  foo    two  1.627081 -0.105381\n3  bar  three -0.990582 -0.532532\n4  foo    two -0.441652  1.453749\n5  bar    two  1.211526  1.208843\n6  foo    one  0.268520 -0.080952\n7  foo  three  0.024580 -0.264610\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Grouping by a column label, selecting column labels, and then applying the ",(0,s.jsx)(e.code,{children:"pandas.core.groupby.DataFrameGroupBy.sum"})," function to the resulting groups:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [89]: df.groupby("A")[["C", "D"]].sum()\nOut[89]:\n            C         D\nA\nbar  1.732707  1.073134\nfoo  2.824590 -0.574779\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Grouping by multiple columns label forms ",(0,s.jsx)(e.code,{children:"MultiIndex"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [90]: df.groupby(["A", "B"]).sum()\nOut[90]:\n                  C         D\nA   B\nbar one    1.511763  0.396823\n    three -0.990582 -0.532532\n    two    1.211526  1.208843\nfoo one    1.614581 -1.658537\n    three  0.024580 -0.264610\n    two    1.185429  1.348368\n'})}),"\n",(0,s.jsx)(e.h2,{id:"reshaping",children:"Reshaping"}),"\n",(0,s.jsx)(e.h3,{id:"stack",children:"Stack"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [91]: arrays = [\n   ....:    ["bar", "bar", "baz", "baz", "foo", "foo", "qux", "qux"],\n   ....:    ["one", "two", "one", "two", "one", "two", "one", "two"],\n   ....: ]\n   ....:\n\nIn [92]: index = pd.MultiIndex.from_arrays(arrays, names=["first", "second"])\n\nIn [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=["A", "B"])\n\nIn [94]: df2 = df[:4]\n\nIn [95]: df2\nOut[95]:\n                     A         B\nfirst second\nbar   one    -0.727965 -0.589346\n      two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n      two     0.884345  1.591431\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"DataFrame.stack"}),' method "compresses" a level in the DataFrame\'s columns:']}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [96]: stacked = df2.stack(future_stack=True)\n\nIn [97]: stacked\nOut[97]:\nfirst  second\nbar    one     A   -0.727965\n               B   -0.589346\n       two     A    0.339969\n               B   -0.693205\nbaz    one     A   -0.339355\n               B    0.593616\n       two     A    0.884345\n               B    1.591431\ndtype: float64\n"})}),"\n",(0,s.jsxs)(e.p,{children:['With a "stacked" DataFrame or Series (having a ',(0,s.jsx)(e.code,{children:"MultiIndex"})," as the ",(0,s.jsx)(e.code,{children:"index"}),"), the inverse operation of ",(0,s.jsx)(e.code,{children:"DataFrame.stack"})," is ",(0,s.jsx)(e.code,{children:"DataFrame.unstack"}),", which by default unstacks the ",(0,s.jsx)(e.strong,{children:"last level"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [98]: stacked.unstack()\nOut[98]:\n                     A         B\nfirst second\nbar   one    -0.727965 -0.589346\n      two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n      two     0.884345  1.591431\n\nIn [99]: stacked.unstack(1)\nOut[99]:\nsecond        one       two\nfirst\nbar   A -0.727965  0.339969\n      B -0.589346 -0.693205\nbaz   A -0.339355  0.884345\n      B  0.593616  1.591431\n\nIn [100]: stacked.unstack(0)\nOut[100]:\nfirst          bar       baz\nsecond\none    A -0.727965 -0.339355\n       B -0.589346  0.593616\ntwo    A  0.339969  0.884345\n       B -0.693205  1.591431\n"})}),"\n",(0,s.jsx)(e.h3,{id:"pivot-tables",children:"Pivot tables"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [101]: df = pd.DataFrame(\n   .....:     {\n   .....:         "A": ["one", "one", "two", "three"] * 3,\n   .....:         "B": ["A", "B", "C"] * 4,\n   .....:         "C": ["foo", "foo", "foo", "bar", "bar", "bar"] * 2,\n   .....:         "D": np.random.randn(12),\n   .....:         "E": np.random.randn(12),\n   .....:     }\n   .....: )\n   .....:\n\nIn [102]: df\nOut[102]:\n        A  B    C         D         E\n0     one  A  foo -1.202872  0.047609\n1     one  B  foo -1.814470 -0.136473\n2     two  C  foo  1.018601 -0.561757\n3   three  A  bar -0.595447 -1.623033\n4     one  B  bar  1.395433  0.029399\n5     one  C  bar -0.392670 -0.542108\n6     two  A  foo  0.007207  0.282696\n7   three  B  foo  1.928123 -0.087302\n8     one  C  foo -0.055224 -1.575170\n9     one  A  bar  2.395985  1.771208\n10    two  B  bar  1.552825  0.816482\n11  three  C  bar  0.166599  1.100230\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"pivot_table"})," pivots a ",(0,s.jsx)(e.code,{children:"DataFrame"})," specifying the ",(0,s.jsx)(e.code,{children:"values"}),", ",(0,s.jsx)(e.code,{children:"index"})," and ",(0,s.jsx)(e.code,{children:"columns"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [103]: pd.pivot_table(df, values="D", index=["A", "B"], columns=["C"])\nOut[103]:\nC             bar       foo\nA     B\none   A  2.395985 -1.202872\n      B  1.395433 -1.814470\n      C -0.392670 -0.055224\nthree A -0.595447       NaN\n      B       NaN  1.928123\n      C  0.166599       NaN\ntwo   A       NaN  0.007207\n      B  1.552825       NaN\n      C       NaN  1.018601\n'})}),"\n",(0,s.jsx)(e.h2,{id:"time-series",children:"Time series"}),"\n",(0,s.jsx)(e.p,{children:"pandas has simple, powerful, and efficient functionality for performing resampling operations during frequency conversion (e.g., converting secondly data into 5-minutely data). This is extremely common in, but not limited to, financial applications."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [104]: rng = pd.date_range("1/1/2012", periods=100, freq="S")\n\nIn [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)\n\nIn [106]: ts.resample("5Min").sum()\nOut[106]:\n2012-01-01    24182\nFreq: 5T, dtype: int64\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Series.tz_localize"})," localizes a time series to a time zone:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [107]: rng = pd.date_range("3/6/2012 00:00", periods=5, freq="D")\n\nIn [108]: ts = pd.Series(np.random.randn(len(rng)), rng)\n\nIn [109]: ts\nOut[109]:\n2012-03-06    1.857704\n2012-03-07   -1.193545\n2012-03-08    0.677510\n2012-03-09   -0.153931\n2012-03-10    0.520091\nFreq: D, dtype: float64\n\nIn [110]: ts_utc = ts.tz_localize("UTC")\n\nIn [111]: ts_utc\nOut[111]:\n2012-03-06 00:00:00+00:00    1.857704\n2012-03-07 00:00:00+00:00   -1.193545\n2012-03-08 00:00:00+00:00    0.677510\n2012-03-09 00:00:00+00:00   -0.153931\n2012-03-10 00:00:00+00:00    0.520091\nFreq: D, dtype: float64\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Series.tz_convert"})," converts a timezones aware time series to another time zone:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [112]: ts_utc.tz_convert("US/Eastern")\nOut[112]:\n2012-03-05 19:00:00-05:00    1.857704\n2012-03-06 19:00:00-05:00   -1.193545\n2012-03-07 19:00:00-05:00    0.677510\n2012-03-08 19:00:00-05:00   -0.153931\n2012-03-09 19:00:00-05:00    0.520091\nFreq: D, dtype: float64\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Adding a non-fixed duration (",(0,s.jsx)(e.code,{children:"pandas.tseries.offsets.BusinessDay"}),") to a time series:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"In [113]: rng\nOut[113]:\nDatetimeIndex(['2012-03-06', '2012-03-07', '2012-03-08', '2012-03-09',\n               '2012-03-10'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [114]: rng + pd.offsets.BusinessDay(5)\nOut[114]:\nDatetimeIndex(['2012-03-13', '2012-03-14', '2012-03-15', '2012-03-16',\n               '2012-03-16'],\n              dtype='datetime64[ns]', freq=None)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"categoricals",children:"Categoricals"}),"\n",(0,s.jsxs)(e.p,{children:["pandas can include categorical data in a ",(0,s.jsx)(e.code,{children:"DataFrame"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [115]: df = pd.DataFrame(\n   .....:     {"id": [1, 2, 3, 4, 5, 6], "raw_grade": ["a", "b", "b", "a", "a", "e"]}\n   .....: )\n   .....:\n'})}),"\n",(0,s.jsx)(e.p,{children:"Converting the raw grades to a categorical data type:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [116]: df["grade"] = df["raw_grade"].astype("category")\n\nIn [117]: df["grade"]\nOut[117]:\n0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): [\'a\', \'b\', \'e\']\n'})}),"\n",(0,s.jsx)(e.p,{children:"Rename the categories to more meaningful names:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [118]: new_categories = ["very good", "good", "very bad"]\n\nIn [119]: df["grade"] = df["grade"].cat.rename_categories(new_categories)\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Reorder the categories and simultaneously add the missing categories (methods under ",(0,s.jsx)(e.code,{children:"Series.cat"})," return a new ",(0,s.jsx)(e.code,{children:"Series"})," by default):"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [120]: df["grade"] = df["grade"].cat.set_categories(\n   .....:     ["very bad", "bad", "medium", "good", "very good"]\n   .....: )\n   .....:\n\nIn [121]: df["grade"]\nOut[121]:\n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): [\'very bad\', \'bad\', \'medium\', \'good\', \'very good\']\n'})}),"\n",(0,s.jsx)(e.p,{children:"Sorting is per order in the categories, not lexical order:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [122]: df.sort_values(by="grade")\nOut[122]:\n   id raw_grade      grade\n5   6         e   very bad\n1   2         b       good\n2   3         b       good\n0   1         a  very good\n3   4         a  very good\n4   5         a  very good\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Grouping by a categorical column with ",(0,s.jsx)(e.code,{children:"observed=False"})," also shows empty categories:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [123]: df.groupby("grade", observed=False).size()\nOut[123]:\ngrade\nvery bad     1\nbad          0\nmedium       0\ngood         2\nvery good    3\ndtype: int64\n'})}),"\n",(0,s.jsx)(e.h2,{id:"plotting",children:"Plotting"}),"\n",(0,s.jsx)(e.p,{children:"We use the standard convention for referencing the matplotlib API:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [124]: import matplotlib.pyplot as plt\n\nIn [125]: plt.close("all")\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"plt.close"})," method is used to ",(0,s.jsx)(e.a,{href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.close.html",children:"close"})," a figure window:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [126]: ts = pd.Series(np.random.randn(1000), index=pd.date_range("1/1/2000", periods=1000))\n\nIn [127]: ts = ts.cumsum()\n\nIn [128]: ts.plot();\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:a(93089).Z+"",width:"640",height:"480"})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["When using Jupyter, the plot will appear using ",(0,s.jsx)(e.code,{children:"Series.plot"}),". Otherwise use ",(0,s.jsx)(e.a,{href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.show.html",children:"matplotlib.pyplot.show"})," to show it or ",(0,s.jsx)(e.a,{href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html",children:"matplotlib.pyplot.savefig"})," to write it to a file."]})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"DataFrame.plot"})," plots all columns:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [129]: df = pd.DataFrame(\n   .....:     np.random.randn(1000, 4), index=ts.index, columns=["A", "B", "C", "D"]\n   .....: )\n   .....:\n\nIn [130]: df = df.cumsum()\n\nIn [131]: plt.figure();\n\nIn [132]: df.plot();\n\nIn [133]: plt.legend(loc=\'best\');\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:a(49731).Z+"",width:"640",height:"480"})}),"\n",(0,s.jsx)(e.h2,{id:"data-import-export",children:"Importing and exporting data"}),"\n",(0,s.jsx)(e.h3,{id:"csv",children:"CSV"}),"\n",(0,s.jsxs)(e.p,{children:["Writing to a csv file: using ",(0,s.jsx)(e.code,{children:"DataFrame.to_csv"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [134]: df = pd.DataFrame(np.random.randint(0, 5, (10, 5)))\n\nIn [135]: df.to_csv("foo.csv")\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Reading from a csv file: using ",(0,s.jsx)(e.code,{children:"DataFrame.read_csv"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [136]: pd.read_csv("foo.csv")\nOut[136]:\n   Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3\n'})}),"\n",(0,s.jsx)(e.h3,{id:"parquet",children:"Parquet"}),"\n",(0,s.jsx)(e.p,{children:"Writing to a Parquet file:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [137]: df.to_parquet("foo.parquet")\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Reading from a Parquet file Store using ",(0,s.jsx)(e.code,{children:"read_parquet"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [138]: pd.read_parquet("foo.parquet")\nOut[138]:\n   0  1  2  3  4\n0  4  3  1  1  2\n1  1  0  2  3  2\n2  1  4  2  1  2\n3  0  4  0  2  2\n4  4  2  2  3  4\n5  4  0  4  3  1\n6  2  1  2  0  3\n7  4  0  4  4  4\n8  4  4  1  0  1\n9  0  4  3  0  3\n'})}),"\n",(0,s.jsx)(e.h3,{id:"excel",children:"Excel"}),"\n",(0,s.jsxs)(e.p,{children:["Writing to an excel file using ",(0,s.jsx)(e.code,{children:"DataFrame.to_excel"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [139]: df.to_excel("foo.xlsx", sheet_name="Sheet1")\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Reading from an excel file using ",(0,s.jsx)(e.code,{children:"read_excel"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [140]: pd.read_excel("foo.xlsx", "Sheet1", index_col=None, na_values=["NA"])\nOut[140]:\n   Unnamed: 0  0  1  2  3  4\n   1           1  1  0  2  3  2\n0           0  4  3  1  1  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3\n'})}),"\n",(0,s.jsx)(e.h2,{id:"gotchas",children:"Gotchas"}),"\n",(0,s.jsxs)(e.p,{children:["If you are attempting to perform a boolean operation on a ",(0,s.jsx)(e.code,{children:"Series"})," or ",(0,s.jsx)(e.code,{children:"DataFrame"})," you might see an exception like:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'In [141]: if pd.Series([False, True, False]):\n   .....:      print("I was true")\n   .....:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-141-b27eb9c1dfc0> in ?()\n----\x3e 1 if pd.Series([False, True, False]):\n      2      print("I was true")\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n   1517     @final\n   1518     def __nonzero__(self) -> NoReturn:\n-> 1519         raise ValueError(\n   1520             f"The truth value of a {type(self).__name__} is ambiguous. "\n   1521             "Use a.empty, a.bool(), a.item(), a.any() or a.all()."\n   1522         )\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n'})})]})}function h(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},49731:(n,e,a)=>{a.d(e,{Z:()=>s});const s=a.p+"assets/images/frame_plot_basic-52270c933f17a17960360323afe0eede.png"},93089:(n,e,a)=>{a.d(e,{Z:()=>s});const s=a.p+"assets/images/series_plot_basic-9870575cdba7d407ea0c3a4653a0a5c7.png"},11151:(n,e,a)=>{a.d(e,{Z:()=>r,a:()=>i});var s=a(67294);const t={},d=s.createContext(t);function i(n){const e=s.useContext(d);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(d.Provider,{value:e},n.children)}}}]);