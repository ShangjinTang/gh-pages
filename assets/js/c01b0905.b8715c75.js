"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7019],{81330:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=r(74848),d=r(28453);const o={},t="\u521b\u5efa\u4e00\u4e2a Looper \u7ebf\u7a0b",s={id:"android-framework/handler/create-a-thread-with-looper",title:"\u521b\u5efa\u4e00\u4e2a Looper \u7ebf\u7a0b",description:"\u65b9\u6cd5\u4e00\uff1a\u521b\u5efa\u4e00\u4e2a Thread \u7ebf\u7a0b",source:"@site/docs/android-framework/handler/02-create-a-thread-with-looper.md",sourceDirName:"android-framework/handler",slug:"/android-framework/handler/create-a-thread-with-looper",permalink:"/site/docs/android-framework/handler/create-a-thread-with-looper",draft:!1,unlisted:!1,editUrl:"https://github.com/ShangjinTang/docusaurus/edit/master/docs/android-framework/handler/02-create-a-thread-with-looper.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"androidframeworkSidebar",previous:{title:"Handler \u4ecb\u7ecd",permalink:"/site/docs/android-framework/handler/handler-introduction"}},i={},l=[{value:"\u65b9\u6cd5\u4e00\uff1a\u521b\u5efa\u4e00\u4e2a Thread \u7ebf\u7a0b",id:"\u65b9\u6cd5\u4e00\u521b\u5efa\u4e00\u4e2a-thread-\u7ebf\u7a0b",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u521b\u5efa\u4e00\u4e2a HandlerThread \u7ebf\u7a0b",id:"\u65b9\u6cd5\u4e8c\u521b\u5efa\u4e00\u4e2a-handlerthread-\u7ebf\u7a0b",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"\u521b\u5efa\u4e00\u4e2a-looper-\u7ebf\u7a0b",children:"\u521b\u5efa\u4e00\u4e2a Looper \u7ebf\u7a0b"})}),"\n",(0,a.jsx)(n.h2,{id:"\u65b9\u6cd5\u4e00\u521b\u5efa\u4e00\u4e2a-thread-\u7ebf\u7a0b",children:"\u65b9\u6cd5\u4e00\uff1a\u521b\u5efa\u4e00\u4e2a Thread \u7ebf\u7a0b"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"MainActivity.kt"})," \u5185\u7684 ",(0,a.jsx)(n.code,{children:"onCreate()"})," \u6700\u540e\u6dfb\u52a0\uff1a"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'        val looperThread = LooperThread()\n        looperThread.start()\n\n        thread {\n            Thread.sleep(3000)\n            val message = Message()\n            message.what = LooperThread.EVENT_INIT\n            message.target = looperThread.getHandler()\n            Log.d(\n                "MainActivity",\n                "send message ${message.what} at thread id ${Thread.currentThread().id}"\n            )\n            message.sendToTarget()\n        }\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["\u65b0\u5efa ",(0,a.jsx)(n.code,{children:"LooperThread.kt"}),"\uff1a"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'package com.example.myapplication\n\nimport android.os.Handler\nimport android.os.Looper\nimport android.os.Message\nimport android.util.Log\n\n\nclass LooperThread : Thread() {\n    private var handler: Handler? = null\n    private var isInitialized = false\n\n\n    fun getHandler(): Handler? {\n        return handler\n    }\n\n    override fun run() {\n        Looper.prepare()\n        handler = object : Handler(Looper.myLooper()!!) {\n            override fun handleMessage(msg: Message) {\n                Log.d(\n                    TAG,\n                    "Received message ${msg.what} at thread id ${\n                        currentThread().id\n                    }"\n                )\n                when (msg.what) {\n                    EVENT_INIT -> {\n                        performInit()\n                    }\n                    else -> println("Unknown Event: " + msg.what)\n                }\n            }\n        }\n        isInitialized = true\n        Looper.loop()\n    }\n\n    fun isInitialized(): Boolean {\n        return isInitialized\n    }\n\n    private fun performInit() {\n        Log.d(TAG, "performInit() called")\n        sleep(1000);\n    }\n\n    companion object {\n        const val EVENT_INIT: Int = 1\n        private const val TAG = "LooperThread"\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"\u65b9\u6cd5\u4e8c\u521b\u5efa\u4e00\u4e2a-handlerthread-\u7ebf\u7a0b",children:"\u65b9\u6cd5\u4e8c\uff1a\u521b\u5efa\u4e00\u4e2a HandlerThread \u7ebf\u7a0b"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"MainActivity.kt"})," \u5185\u7684 ",(0,a.jsx)(n.code,{children:"onCreate()"})," \u6700\u540e\u6dfb\u52a0\uff1a"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'        val myHandlerThread = MyHandlerThread("MyHandlerThreadA")\n        myHandlerThread.start()\n\n        thread {\n            Thread.sleep(3000)\n            val message = Message()\n            message.what = MyHandlerThread.EVENT_INIT\n            message.target = myHandlerThread.handler\n            Log.d(\n                "MainActivity",\n                "send message ${message.what} at thread id ${Thread.currentThread().id}"\n            )\n            message.sendToTarget()\n        }\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["\u65b0\u5efa ",(0,a.jsx)(n.code,{children:"MyHandlerThread.kt"}),"\uff1a"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'package com.example.myapplication\n\nimport android.os.Handler\nimport android.os.HandlerThread\nimport android.os.Looper\nimport android.os.Message\nimport android.util.Log\n\npublic class MyHandlerThread(name: String?) : HandlerThread(name) {\n    lateinit var handler: Handler;\n\n    override fun onLooperPrepared() {\n        super.onLooperPrepared()\n        handler = object : Handler(Looper.myLooper()!!) {\n            override fun handleMessage(msg: Message) {\n                Log.d(\n                    TAG,\n                    "Received message ${msg.what} at thread id ${\n                        currentThread().id\n                    }"\n                )\n                when (msg.what) {\n                    EVENT_INIT -> performInit()\n                    else -> println("Unknown Event: " + msg.what)\n                }\n            }\n        }\n    }\n\n\n    private fun performInit() {\n        Log.d(TAG, "performInit() called")\n        sleep(1000);\n    }\n\n    companion object {\n        const val EVENT_INIT: Int = 1\n        private const val TAG = "MyHandlerThread"\n    }\n}\n'})}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var a=r(96540);const d={},o=a.createContext(d);function t(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);